#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

error_log  logs/error.log;
error_log  logs/error.log  info;

events {
    worker_connections  1024;
}

http {
    # ... other Nginx configuration settings ...   
   lua_shared_dict auto_ssl 1m;
   lua_shared_dict auto_ssl_settings 64k;
   resolver [2001:4860:4860::8888] [2001:4860:4860::8844] 8.8.8.8 8.8.4.4 valid=300s ipv6=on;
   lua_shared_dict server_blocks 10m;
   lua_shared_dict dynamic_certs 10m;
   lua_shared_dict data_track 20m;
   
   server {
        listen 80;
        listen [::]:80;
        server_name $host ;   
        location / {   
        return 301 https://$host$request_uri;
        }  
   }

   server {
        listen 443 ssl;
        listen [::]:443;
        resolver 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844]  valid=300s ipv6=on;
        lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt ;   
        server_name $host;
        ssl_certificate /etc/openresty/certs/ca.crt;
        ssl_certificate_key /etc/openresty/certs/ca.key; 
       
        ssl_certificate_by_lua_block  {
            local ssl = require "ngx.ssl"
            local addr = ssl.server_name()
            
            local global_key = "/etc/openresty/rootCA/global.key"
            local global_crt = "/etc/openresty/rootCA/global.crt"
            local web_server_key = "/etc/openresty/certs/ca.key"
            local web_server_csr = "/etc/openresty/certs/ca.csr"
            local web_server_pkey_der = "/etc/openresty/certs/ca.der"
            local web_server_pub_der = "/etc/openresty/certs/ca_pub.der"

            local dynamic_certs = ngx.shared.dynamic_certs

            -- prepare command
            local command_csr  = "openssl req -new -key " .. web_server_key .."  -subj \"/CN=" .. addr .. "/ST=Berlin/C=DE/O=MITM Co/OU=security\" -out " .. web_server_csr
            local command_sign = "openssl x509 -req -in " .. web_server_csr .. " -CA " .. global_crt .. " -CAkey  " .. global_key .. " -CAcreateserial -days 360 -outform DER -out " .. web_server_pub_der     


            local function cert_reader(filepath)
                -- read file and return content
                local file_io=assert(io.open(filepath, "r"))
                local file_content = file_io:read("*all")
                file_io:close()
                return file_content
            end

            -- < Save flag in shared dict
            for k, v in pairs(dynamic_certs) do
                if k == addr then
                    dynamic_certs:set(addr .. "_cert", 1)
                end
            end

            if dynamic_certs:get(addr .. "_cert") ~= 1 then
                -- generate csr and sign
                os.execute(command_csr)
                os.execute(command_sign)
                -- define content in shared dictionary
                dynamic_certs:set("private_key", cert_reader(web_server_pkey_der))
                dynamic_certs:set(addr, cert_reader(web_server_pub_der))
                -- save flag true for this addr
                dynamic_certs:set(addr .. "_cert", 1)
            end

            -- < Save flag in shared dict
          
            -- remove all loaded keys
            local ok, err = ssl.clear_certs()

            -- load public key
            local val, err = dynamic_certs:get(addr)
            local ok, err = ssl.set_der_cert(val)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER public cert: ", err)
                return ngx.exit(ngx.ERROR)
            end

            -- load private key
            local val, err = dynamic_certs:get("private_key")
            local ok, err = ssl.set_der_priv_key(val)
            if not ok then
                ngx.log(ngx.ERR, "failed to set DER private key: ", err)
                return ngx.exit(ngx.ERROR)
            end    
            }

        location / {
            # default_type 'text/html';
            proxy_ssl_server_name on;
            proxy_ssl_session_reuse on;
            proxy_set_header UPgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering        on;
            proxy_cache_valid      200  1d;
            proxy_cache_key $scheme://$host$uri$is_args$query_string;
            proxy_cache_bypass $arg_should_bypass_cache;
            http2_push_preload              on;

          content_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            
            -- define where to save
            local data_track = ngx.shared.data_track
            local response_log = "/tmp/response.txt"

            local httpc = http.new()
            local path = ngx.var.request_uri

            local passHeader = {["cookie"]=ngx.req.get_headers()["cookie"]}
            passHeader["content-type"] = ngx.req.get_headers()["content-type"]
            passHeader["X-Forwarded-Proto"] = "https"
            passHeader["X-Forwarded-Host"] = ngx.var.host .. ":443"
            passHeader["X-Real-IP"] = ngx.var.remote_addr
            passHeader["Host"] = ngx.var.host
            passHeader["X-Forwarded-For"] = ngx.var.proxy_add_x_forwarded_for
            passHeader["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"

            passHeader = ngx.req.get_headers()
          
            ngx.req.read_body();
            local body = ngx.req.get_body_data();

            -- build full URL
            local original_req_uri =  ngx.var.scheme .. "://"  .. ngx.var.host .. path

            local req_method = ngx.req.get_method()

            local res, err = httpc:request_uri(original_req_uri, {
                      method = req_method,
                      keepalive_timeout = 6000,
                      ssl_verify = true,
                      headers = passHeader,
                      keepalive_pool = 10,
                      body = body
                    })

if res then

            local function  save_to_file (file_path, data )
                local file, err = io.open(file_path, "w")
                local success, err = file:write(data)
                file:close()
                -- no need return
            end
            -- loading external file. 
            local f = loadfile('/etc/nginx/mlib/rule.lua')
            f()
            on_fly(original_req_uri,res.body,res.headers["Content-Encoding"] )
            -- local data, err = data_track:get(ngx.var.remote_addr)

            -- load resonse key
            for k, v in pairs(res.headers) do
                ngx.header[k] = v
            end

            ngx.status = res.status
            ngx.print(res.body)
end
            }
       }  
    }
}
